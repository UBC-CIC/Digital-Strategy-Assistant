openapi: 3.0.0
servers: []
info:
  title: Digital Learning Strategy API
  description: This API intended to deploy on aws API Gateway
  version: "1.0.0"
tags:
  - name: User
    description: endpoints accessible by the general public
  - name: Instructor
    description: endpoints accessible by instructors
  - name: Admin
    description: endpoints accessible by admins
x-amazon-apigateway-request-validators:
  all:
    validateRequestParameters: true
    validateRequestBody: true
  params-only:
    validateRequestParameters": true
    validateRequestBody": false
x-amazon-apigateway-request-validator: params-only
x-amazon-apigateway-gateway-responses:
  UNAUTHORIZED:
    statusCode: "401"
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
    responseTemplates:
      application/json: |
        {"message":$context.error.messageString}
x-common-options: &commonOptions
  options:
    summary: CORS support
    description: |
      Enable CORS by returning correct headers
    responses:
      200:
        $ref: "#/components/responses/Success"
    x-amazon-apigateway-integration:
      type: mock
      requestTemplates:
        application/json: |
          {
            "statusCode" : 200
          }
      responses:
        default:
          statusCode: "200"
          responseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'*'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          responseTemplates:
            application/json: |
              {}
paths:
  /user/text_generation:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    post:
      tags:
        - User
      summary: Generate a response from the LLM
      operationId: user_text_generation_POST
      parameters:
        - in: query
          name: category_id
          required: true
          description: ID of the course
          schema:
            type: string
        - in: query
          name: session_id
          required: true
          description: ID of the session since multiple sessions can exist within a table
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                message_content:
                  type: string
                  description: Content of the user's message
      responses:
        "200":
          description: Response with generated array and input value
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_name:
                    type: string
                    description: Name of the session which becomes the conversation's label
                  llm_output:
                    type: string
                    description: Response generated by the LLM
                  llm_verdict:
                    type: string
                    description: Judgement of the LLM whether the user has achieved mastery over the module
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TextGenLambdaDockerFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /user/create_session:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    post:
      tags:
        - User
      summary: Create a session for a user
      operationId: user_create_session_POST
      parameters:
        - in: query
          name: user_info
          required: true
          description: salted user info
          schema:
            type: string
        - in: query
          name: user_role
          required: true
          description: role of the user
          schema:
            type: string
      responses:
        "200":
          description: Session created
        "400":
          description: Invalid value
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${userFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /user/create_feedback:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    post:
      tags:
        - User
      summary: Create feedback for a user
      operationId: user_create_feedback_POST
      parameters:
        - in: query
          name: user_info
          required: true
          description: salted user info
          schema:
            type: string
        - in: query
          name: session_id
          required: true
          description: id of the session
          schema:
            type: string
        - in: query
          name: user_role
          required: true
          description: role of the user
          schema:
            type: string
        - in: query
          name: feedback_rating
          required: true
          description: rating of the feedback
          schema:
            type: string
        - in: query
          name: feedback_description
          required: true
          description: additional details about the feedback
          schema:
            type: string
      responses:
        "200":
          description: feedback created
        "400":
          description: Invalid value
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${userFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /user/get_messages:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - User
      summary: Get all messages in a session
      operationId: get_messages_GET
      parameters:
        - in: query
          name: session_id
          required: true
          schema:
            type: string
          description: The ID of the session
      responses:
        "200":
          description: List of messages in the session
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    message_id:
                      type: string
                    session_id:
                      type: string
                    user_sent:
                      type: boolean
                    message_content:
                      type: string
                    time_sent:
                      type: string
                      format: date-time
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "session_id query parameter is required"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Session not found"
        "500":
          description: Internal Server Error
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${userFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/generate_presigned_url:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Admin
      summary: Generate a presigned URL for uploading files
      operationId: admin_generate_presigned_url_GET
      parameters:
        - in: query
          name: category_id
          required: true
          description: ID of the category
          schema:
            type: string
        - in: query
          name: document_type
          required: true
          description: extension of the document
          schema:
            type: string
        - in: query
          name: document_name
          required: true
          description: name of the document
          schema:
            type: string
      responses:
        "200":
          description: Presigned URL generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  presignedurl:
                    type: string
                    description: Presigned URL to upload document file to S3 Bucket
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GeneratePreSignedURLFunc.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/delete_file:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    delete:
      tags:
        - Admin
      summary: Delete certain file
      operationId: admin_delete_file_DELETE
      parameters:
        - in: query
          name: category_id
          required: true
          description: id of the category
          schema:
            type: string
        - in: query
          name: document_type
          required: true
          description: Type of file (pdf or jpg)
          schema:
            type: string
        - in: query
          name: document_name
          required: true
          description: Name of the file
          schema:
            type: string
      responses:
        "200":
          description: File deleted successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteDocumentFunc.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/delete_category:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    delete:
      tags:
        - Admin
      summary: Delete certain category
      operationId: instructor_delete_category
      parameters:
        - in: query
          name: category_id
          required: true
          description: ID of the category
          schema:
            type: string
      responses:
        "200":
          description: File deleted successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteCategoryFunc.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/analytics:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Admin
      summary: Get analytics data
      operationId: admin_get_analytics_GET
      responses:
        "200":
          description: Analytics data retrieved successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/create_category:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    post:
      tags:
        - Admin
      summary: Create a new category
      description: |
        Adds a new category to the database with a unique ID, name, and number.
      operationId: admin_create_category_POST
      parameters:
        - in: query
          name: category_name
          required: true
          description: The name of the category to be created.
          schema:
            type: string
        - in: query
          name: category_number
          required: true
          description: The number associated with the category.
          schema:
            type: integer
      responses:
        "201":
          description: Category created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  category_id:
                    type: string
                    format: uuid
                    description: The unique ID of the created category.
                  category_name:
                    type: string
                    description: The name of the created category.
                  category_number:
                    type: integer
                    description: The number associated with the created category.
        "400":
          description: Bad Request - Missing parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Description of the error.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Description of the error.
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/categories:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Admin
      summary: Retrieve all categories
      description: |
        Fetches a list of all categories along with their names and associated numbers.
      operationId: admin_get_categories_GET
      responses:
        "200":
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    category_id:
                      type: string
                      format: uuid
                      description: The unique ID of the category.
                    category_name:
                      type: string
                      description: The name of the category.
                    category_number:
                      type: integer
                      description: The number associated with the category.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Description of the error.
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/edit_category:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    put:
      tags:
        - Admin
      summary: Edit an existing category
      operationId: admin_edit_category_PUT
      parameters:
        - in: query
          name: category_id
          required: true
          description: ID of the category to be edited
          schema:
            type: string
        - in: query
          name: category_name
          required: true
          description: New name of the category
          schema:
            type: string
        - in: query
          name: category_number
          required: true
          description: New number associated with the category
          schema:
            type: integer
      responses:
        "200":
          description: Category updated successfully
        "400":
          description: Missing required parameters
        "404":
          description: Category not found
        "500":
          description: Internal Server Error
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/update_metadata:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    put:
      tags:
        - Admin
      summary: Update meta data of a document
      operationId: admin_update_metadata_PUT
      parameters:
        - in: query
          name: document_id
          required: true
          description: ID of the document to update
          schema:
            type: string
        - in: query
          name: metadata
          required: true
          description: New meta data to be set for the document
          schema:
            type: string
      responses:
        "200":
          description: Meta data updated successfully
        "400":
          description: Missing required parameters
        "404":
          description: Document not found
        "500":
          description: Internal Server Error
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/files_within_category:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Admin
      summary: Get files within a specific category
      operationId: admin_get_files_within_category_GET
      parameters:
        - in: query
          name: category_id
          required: true
          description: ID of the category for which files are requested
          schema:
            type: string
      responses:
        "200":
          description: Files retrieved successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetDocumentsFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/conversation_history_preview:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Admin
      summary: Get the 10 most recent message creation engagement types for each role
      operationId: admin_get_conversation_history_preview_GET
      responses:
        "200":
          description: Recent message creations retrieved successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/conversation_sessions:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Admin
      summary: Get conversation sessions for a specific user role
      operationId: admin_get_conversation_sessions_GET
      parameters:
        - in: query
          name: user_role
          required: true
          description: The role of the user for which sessions are requested (public, educator, admin)
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved conversation sessions
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/conversation_messages:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Admin
      summary: Get messages for a specific session
      operationId: admin_get_conversation_messages_GET
      parameters:
        - in: query
          name: session_id
          required: true
          description: The ID of the session for which messages are requested
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved messages for the session
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"

components:
  securitySchemes:
    adminAuthorizer:
      type: "apiKey"
      name: "Authorization" # The header name where the token is provided
      in: "header"
      x-amazon-apigateway-authtype: "custom"
      x-amazon-apigateway-authorizer:
        type: token
        authorizerUri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminLambdaAuthorizer.Arn}/invocations"
        identitySource: method.request.header.Authorization
  responses:
    Success:
      description: Request success
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content: {}
